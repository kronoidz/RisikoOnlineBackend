// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RisikoOnline.Data;

namespace RisikoOnline.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210123155512_m3")]
    partial class m3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("RisikoOnline.Data.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverName");

                    b.HasIndex("SenderName");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("RisikoOnline.Data.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentPlayerName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id", "CurrentPlayerName")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("RisikoOnline.Data.MatchHistoryRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerName");

                    b.ToTable("MatchHistoryRecord");
                });

            modelBuilder.Entity("RisikoOnline.Data.Player", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RisikoOnline.Data.PlayerState", b =>
                {
                    b.Property<int>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInitialized")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("MissionObjective")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReinforcementPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetPlayerName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnplacedArmies")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchId", "PlayerName");

                    b.HasIndex("PlayerName");

                    b.HasIndex("MatchId", "TargetPlayerName")
                        .IsUnique();

                    b.ToTable("PlayerState");
                });

            modelBuilder.Entity("RisikoOnline.Data.TerritoryOwnership", b =>
                {
                    b.Property<int>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Territory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Armies")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchId", "PlayerName", "Territory");

                    b.HasIndex("PlayerName");

                    b.ToTable("TerritoryOwnership");
                });

            modelBuilder.Entity("RisikoOnline.Data.Invitation", b =>
                {
                    b.HasOne("RisikoOnline.Data.Player", "Receiver")
                        .WithMany("IncomingInvitations")
                        .HasForeignKey("ReceiverName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RisikoOnline.Data.Player", "Sender")
                        .WithMany("OutgoingInvitations")
                        .HasForeignKey("SenderName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RisikoOnline.Data.Match", b =>
                {
                    b.HasOne("RisikoOnline.Data.PlayerState", "CurrentPlayerState")
                        .WithOne()
                        .HasForeignKey("RisikoOnline.Data.Match", "Id", "CurrentPlayerName");

                    b.Navigation("CurrentPlayerState");
                });

            modelBuilder.Entity("RisikoOnline.Data.MatchHistoryRecord", b =>
                {
                    b.HasOne("RisikoOnline.Data.Player", "Player")
                        .WithMany("History")
                        .HasForeignKey("PlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RisikoOnline.Data.PlayerState", b =>
                {
                    b.HasOne("RisikoOnline.Data.Match", "Match")
                        .WithMany("PlayerStates")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RisikoOnline.Data.Player", "Player")
                        .WithMany("CurrentMatchStates")
                        .HasForeignKey("PlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RisikoOnline.Data.PlayerState", "TargetPlayer")
                        .WithOne()
                        .HasForeignKey("RisikoOnline.Data.PlayerState", "MatchId", "TargetPlayerName");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("TargetPlayer");
                });

            modelBuilder.Entity("RisikoOnline.Data.TerritoryOwnership", b =>
                {
                    b.HasOne("RisikoOnline.Data.Match", "Match")
                        .WithMany("Ownerships")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RisikoOnline.Data.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RisikoOnline.Data.PlayerState", "PlayerState")
                        .WithMany("Ownerships")
                        .HasForeignKey("MatchId", "PlayerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("PlayerState");
                });

            modelBuilder.Entity("RisikoOnline.Data.Match", b =>
                {
                    b.Navigation("Ownerships");

                    b.Navigation("PlayerStates");
                });

            modelBuilder.Entity("RisikoOnline.Data.Player", b =>
                {
                    b.Navigation("CurrentMatchStates");

                    b.Navigation("History");

                    b.Navigation("IncomingInvitations");

                    b.Navigation("OutgoingInvitations");
                });

            modelBuilder.Entity("RisikoOnline.Data.PlayerState", b =>
                {
                    b.Navigation("Ownerships");
                });
#pragma warning restore 612, 618
        }
    }
}
